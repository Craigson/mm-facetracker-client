{"ast":null,"code":"var _jsxFileName = \"/Users/craigpickard/Dev/web/hbo-client/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { uuid } from \"uuidv4\";\nimport \"./App.css\";\nimport VideoFeed from \"./components/VideoFeed\";\nconst constraints = {\n  video: {\n    width: {\n      max: 320\n    },\n    height: {\n      max: 240\n    },\n    frameRate: {\n      max: 24\n    }\n  },\n  audio: true\n};\nconst client = new W3CWebSocket(\"wss://10.0.1.12:8443\");\n\nfunction App() {\n  const [state, setState] = useState({\n    roomId: null,\n    me: {\n      uuid: \"\",\n      username: \"\",\n      roomId: \"\",\n      host: false\n    },\n    stream: null,\n    login: true,\n    peerConnections: [],\n    videoFeeds: []\n  });\n  let localStream = \"\";\n  let peerConnections = [];\n  const peerConnectionConfig = {\n    iceServers: [{\n      urls: \"stun:stun.stunprotocol.org:3478\"\n    }, {\n      urls: \"stun:stun.l.google.com:19302\"\n    }]\n  };\n  let hasStream = [];\n  useEffect(() => {\n    let hash = window.location.hash.replace(\"#\", \"\");\n    const newMe = { ...state.me,\n      roomId: hash.split(\"=\")[1]\n    };\n    setState({ ...state,\n      me: newMe\n    });\n\n    _init();\n  }, []);\n\n  const addUser = player => {\n    console.log(\"adding new user\");\n    if (state.players < 2) setState({ ...state,\n      players: [...state.players, player]\n    });else console.log(\"max 2 people per room\");\n  };\n\n  const addVideoFeed = videoFeed => {\n    console.log(\"adding video feed\");\n    setState({ ...state,\n      videoFeeds: [...state.videoFeeds, videoFeed]\n    });\n  };\n\n  function _init() {\n    console.log(\"init websocket\"); // client = new W3CWebSocket(\"wss://10.0.1.12:8443\");\n\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n\n    client.onmessage = message => {\n      let obj = JSON.parse(message.data);\n      console.log(obj);\n\n      switch (obj.eventName) {\n        case \"selfSetup\":\n          console.log({\n            meBefore: state.me\n          });\n          const updatedMe = {\n            uuid: obj.data.user.uuid,\n            username: obj.data.user.username,\n            roomId: obj.data.user.room,\n            host: obj.data.user.role === \"HOST\" ? true : false\n          };\n          console.log({\n            updatedMe\n          });\n          setState({ ...state,\n            me: updatedMe\n          });\n          console.log(`https://10.0.1.12:3000/#roomId=${obj.data.user.room}`);\n          break;\n\n        case \"p2pAction\":\n          var peerUuid = obj.data.uuid;\n          console.log({\n            peerUuid\n          });\n\n          if (peerUuid === state.me.uuid || obj.data.dest !== state.me.uuid && obj.data.dest !== \"all\") {\n            break;\n          }\n\n          if (obj.data.displayName && obj.data.dest === \"all\") {\n            // set up peer connection object for a newcomer peer\n            setUpPeer(peerUuid, obj.data.displayName);\n            client.send(JSON.stringify({\n              eventName: \"p2pAction\",\n              data: {\n                displayName: state.me.username,\n                uuid: state.me.uuid,\n                dest: peerUuid\n              }\n            }));\n          } else if (obj.data.displayName && obj.data.dest === state.me.uuid) {\n            // initiate call if we are the newcomer peer\n            setUpPeer(peerUuid, obj.data.displayName, true);\n          } else if (obj.data.sdp) {\n            peerConnections[peerUuid].pc.setRemoteDescription(new RTCSessionDescription(obj.data.sdp)).then(() => {\n              // Only create answers in response to offers\n              if (obj.data.sdp.type === \"offer\") {\n                peerConnections[peerUuid].pc.createAnswer().then(description => createdDescription(description, peerUuid)).catch(errorHandler);\n              }\n            }).catch(errorHandler);\n          } else if (obj.data.ice) {\n            peerConnections[peerUuid].pc.addIceCandidate(new RTCIceCandidate(obj.data.ice)).catch(errorHandler);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n  }\n\n  const gotIceCandidate = (event, peerUuid) => {\n    if (event.candidate != null) {\n      client.send(JSON.stringify({\n        eventName: \"p2pAction\",\n        data: {\n          ice: event.candidate,\n          uuid: state.me.uuid,\n          dest: peerUuid\n        }\n      }));\n    }\n  };\n\n  const setUpPeer = (peerUuid, displayName, initCall = false) => {\n    console.log(`setting up webRTC peer: uuid - ${peerUuid}, displayName: ${displayName}`);\n    peerConnections[peerUuid] = {\n      displayName: displayName,\n      pc: new RTCPeerConnection(peerConnectionConfig)\n    };\n\n    peerConnections[peerUuid].pc.onicecandidate = event => gotIceCandidate(event, peerUuid);\n\n    peerConnections[peerUuid].pc.ontrack = event => gotRemoteStream(event, peerUuid);\n\n    peerConnections[peerUuid].pc.oniceconnectionstatechange = event => checkPeerDisconnect(event, peerUuid);\n\n    peerConnections[peerUuid].pc.addStream(localStream);\n\n    if (initCall) {\n      peerConnections[peerUuid].pc.createOffer().then(description => createdDescription(description, peerUuid)).catch(errorHandler);\n    }\n  };\n\n  const errorHandler = err => {\n    console.log(err);\n  };\n\n  const checkPeerDisconnect = (event, peerUuid) => {\n    var states = peerConnections[peerUuid].pc.iceConnectionState;\n    console.log(`connection with peer ${peerUuid} ${states}`);\n\n    if (states === \"failed\" || states === \"closed\" || states === \"disconnected\") {\n      delete peerConnections[peerUuid];\n      let videoFeeds = state.videoFeeds;\n      videoFeeds = videoFeeds.filter(ele => {\n        return ele.peerUUID !== peerUuid;\n      });\n      setState({ ...state,\n        videoFeeds: videoFeeds\n      });\n    }\n  };\n\n  const connectToSocket = () => {\n    console.log(\"connect to socket, roomid: \", state.me.roomId);\n    const {\n      me\n    } = state;\n    let data = {\n      eventName: \"selfSetup\",\n      data: {\n        roomId: me.roomId,\n        displayName: me.username\n      }\n    };\n    client.send(JSON.stringify(data));\n  };\n\n  const gotRemoteStream = (event, peerUuid) => {\n    console.log(\"got remote stream\");\n    console.log(event);\n\n    if (event.track.kind === \"video\") {\n      console.log(`got remote stream, peer ${peerUuid}`);\n      let streamRef = React.createRef();\n      let videoFeed = {\n        ref: streamRef,\n        stream: event.streams[0],\n        peerUUID: peerUuid\n      };\n      addVideoFeed(videoFeed);\n    }\n  };\n\n  const onLogin = e => {\n    console.log(\"login\");\n\n    if (state.me.username !== \"\") {\n      console.log(\"setting login to false\"); // setState({ ...state, login: false });\n\n      connectToSocket();\n      client.send(JSON.stringify({\n        eventName: \"p2pAction\",\n        data: {\n          uuid: state.me.uuid,\n          roomId: state.me.roomId,\n          displayName: state.me.username,\n          dest: \"all\"\n        }\n      }));\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        console.log({\n          stream\n        });\n        localStream = stream; // sets it up for the peer\n\n        setState({ ...state,\n          ...{\n            stream,\n            login: false\n          }\n        }); //  sendPrediction = true;\n      }).catch(errorHandler);\n    }\n  };\n\n  const onUsernameUpdate = e => {\n    console.log({\n      state\n    });\n    console.log(\"should set state:\", e.target.value);\n    const newMe = { ...state.me,\n      username: e.target.value\n    };\n    setState({ ...state,\n      me: newMe\n    });\n  };\n\n  const createdDescription = (description, peerUuid) => {\n    console.log(`got description, peer ${peerUuid}`);\n    peerConnections[peerUuid].pc.setLocalDescription(description).then(() => {\n      client.send(JSON.stringify({\n        eventName: \"p2pAction\",\n        data: {\n          sdp: peerConnections[peerUuid].pc.localDescription,\n          uuid: state.me.uuid,\n          dest: peerUuid\n        }\n      }));\n    }).catch(errorHandler);\n  };\n\n  if (state.login) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    style: {\n      marginTop: \"15%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"725px\",\n      margin: \"0 auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }, \"webRTC\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      marginTop: \"44px\"\n    },\n    type: \"text\",\n    placeholder: \"username\",\n    name: \"username\",\n    onChange: onUsernameUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"connect\",\n    onClick: onLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }));else return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(VideoFeed, {\n    stream: state.stream,\n    videoFeeds: state.videoFeeds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/craigpickard/Dev/web/hbo-client/src/App.js"],"names":["React","useState","useEffect","w3cwebsocket","W3CWebSocket","uuid","VideoFeed","constraints","video","width","max","height","frameRate","audio","client","App","state","setState","roomId","me","username","host","stream","login","peerConnections","videoFeeds","localStream","peerConnectionConfig","iceServers","urls","hasStream","hash","window","location","replace","newMe","split","_init","addUser","player","console","log","players","addVideoFeed","videoFeed","onopen","onmessage","message","obj","JSON","parse","data","eventName","meBefore","updatedMe","user","room","role","peerUuid","dest","displayName","setUpPeer","send","stringify","sdp","pc","setRemoteDescription","RTCSessionDescription","then","type","createAnswer","description","createdDescription","catch","errorHandler","ice","addIceCandidate","RTCIceCandidate","gotIceCandidate","event","candidate","initCall","RTCPeerConnection","onicecandidate","ontrack","gotRemoteStream","oniceconnectionstatechange","checkPeerDisconnect","addStream","createOffer","err","states","iceConnectionState","filter","ele","peerUUID","connectToSocket","track","kind","streamRef","createRef","ref","streams","onLogin","e","navigator","mediaDevices","getUserMedia","onUsernameUpdate","target","value","setLocalDescription","localDescription","marginTop","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { uuid } from \"uuidv4\";\nimport \"./App.css\";\nimport VideoFeed from \"./components/VideoFeed\";\n\nconst constraints = {\n  video: {\n    width: { max: 320 },\n    height: { max: 240 },\n    frameRate: { max: 24 },\n  },\n  audio: true,\n};\n\nconst client = new W3CWebSocket(\"wss://10.0.1.12:8443\");\nfunction App() {\n  const [state, setState] = useState({\n    roomId: null,\n    me: {\n      uuid: \"\",\n      username: \"\",\n      roomId: \"\",\n      host: false,\n    },\n    stream: null,\n    login: true,\n    peerConnections: [],\n    videoFeeds: [],\n  });\n\n  let localStream = \"\";\n  let peerConnections = [];\n  const peerConnectionConfig = {\n    iceServers: [\n      { urls: \"stun:stun.stunprotocol.org:3478\" },\n      { urls: \"stun:stun.l.google.com:19302\" },\n    ],\n  };\n\n  let hasStream = [];\n\n  useEffect(() => {\n    let hash = window.location.hash.replace(\"#\", \"\");\n    const newMe = { ...state.me, roomId: hash.split(\"=\")[1] };\n    setState({ ...state, me: newMe });\n    _init();\n  }, []);\n\n  const addUser = (player) => {\n    console.log(\"adding new user\");\n    if (state.players < 2)\n      setState({ ...state, players: [...state.players, player] });\n    else console.log(\"max 2 people per room\");\n  };\n\n  const addVideoFeed = (videoFeed) => {\n    console.log(\"adding video feed\");\n    setState({ ...state, videoFeeds: [...state.videoFeeds, videoFeed] });\n  };\n\n  function _init() {\n    console.log(\"init websocket\");\n    // client = new W3CWebSocket(\"wss://10.0.1.12:8443\");\n\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n    client.onmessage = (message) => {\n      let obj = JSON.parse(message.data);\n      console.log(obj);\n      switch (obj.eventName) {\n        case \"selfSetup\":\n          console.log({ meBefore: state.me });\n          const updatedMe = {\n            uuid: obj.data.user.uuid,\n            username: obj.data.user.username,\n            roomId: obj.data.user.room,\n            host: obj.data.user.role === \"HOST\" ? true : false,\n          };\n          console.log({ updatedMe });\n          setState({\n            ...state,\n            me: updatedMe,\n          });\n          console.log(`https://10.0.1.12:3000/#roomId=${obj.data.user.room}`);\n          break;\n        case \"p2pAction\":\n          var peerUuid = obj.data.uuid;\n          console.log({ peerUuid });\n          if (\n            peerUuid === state.me.uuid ||\n            (obj.data.dest !== state.me.uuid && obj.data.dest !== \"all\")\n          ) {\n            break;\n          }\n\n          if (obj.data.displayName && obj.data.dest === \"all\") {\n            // set up peer connection object for a newcomer peer\n            setUpPeer(peerUuid, obj.data.displayName);\n            client.send(\n              JSON.stringify({\n                eventName: \"p2pAction\",\n                data: {\n                  displayName: state.me.username,\n                  uuid: state.me.uuid,\n                  dest: peerUuid,\n                },\n              })\n            );\n          } else if (obj.data.displayName && obj.data.dest === state.me.uuid) {\n            // initiate call if we are the newcomer peer\n            setUpPeer(peerUuid, obj.data.displayName, true);\n          } else if (obj.data.sdp) {\n            peerConnections[peerUuid].pc\n              .setRemoteDescription(new RTCSessionDescription(obj.data.sdp))\n              .then(() => {\n                // Only create answers in response to offers\n                if (obj.data.sdp.type === \"offer\") {\n                  peerConnections[peerUuid].pc\n                    .createAnswer()\n                    .then((description) =>\n                      createdDescription(description, peerUuid)\n                    )\n                    .catch(errorHandler);\n                }\n              })\n              .catch(errorHandler);\n          } else if (obj.data.ice) {\n            peerConnections[peerUuid].pc\n              .addIceCandidate(new RTCIceCandidate(obj.data.ice))\n              .catch(errorHandler);\n          }\n          break;\n        default:\n          break;\n      }\n    };\n  }\n\n  const gotIceCandidate = (event, peerUuid) => {\n    if (event.candidate != null) {\n      client.send(\n        JSON.stringify({\n          eventName: \"p2pAction\",\n          data: {\n            ice: event.candidate,\n            uuid: state.me.uuid,\n            dest: peerUuid,\n          },\n        })\n      );\n    }\n  };\n\n  const setUpPeer = (peerUuid, displayName, initCall = false) => {\n    console.log(\n      `setting up webRTC peer: uuid - ${peerUuid}, displayName: ${displayName}`\n    );\n    peerConnections[peerUuid] = {\n      displayName: displayName,\n      pc: new RTCPeerConnection(peerConnectionConfig),\n    };\n    peerConnections[peerUuid].pc.onicecandidate = (event) =>\n      gotIceCandidate(event, peerUuid);\n    peerConnections[peerUuid].pc.ontrack = (event) =>\n      gotRemoteStream(event, peerUuid);\n    peerConnections[peerUuid].pc.oniceconnectionstatechange = (event) =>\n      checkPeerDisconnect(event, peerUuid);\n    peerConnections[peerUuid].pc.addStream(localStream);\n\n    if (initCall) {\n      peerConnections[peerUuid].pc\n        .createOffer()\n        .then((description) => createdDescription(description, peerUuid))\n        .catch(errorHandler);\n    }\n  };\n\n  const errorHandler = (err) => {\n    console.log(err);\n  };\n\n  const checkPeerDisconnect = (event, peerUuid) => {\n    var states = peerConnections[peerUuid].pc.iceConnectionState;\n    console.log(`connection with peer ${peerUuid} ${states}`);\n    if (\n      states === \"failed\" ||\n      states === \"closed\" ||\n      states === \"disconnected\"\n    ) {\n      delete peerConnections[peerUuid];\n      let videoFeeds = state.videoFeeds;\n      videoFeeds = videoFeeds.filter((ele) => {\n        return ele.peerUUID !== peerUuid;\n      });\n      setState({ ...state, videoFeeds: videoFeeds });\n    }\n  };\n\n  const connectToSocket = () => {\n    console.log(\"connect to socket, roomid: \", state.me.roomId);\n    const { me } = state;\n    let data = {\n      eventName: \"selfSetup\",\n      data: {\n        roomId: me.roomId,\n        displayName: me.username,\n      },\n    };\n    client.send(JSON.stringify(data));\n  };\n\n  const gotRemoteStream = (event, peerUuid) => {\n    console.log(\"got remote stream\");\n    console.log(event);\n    if (event.track.kind === \"video\") {\n      console.log(`got remote stream, peer ${peerUuid}`);\n      let streamRef = React.createRef();\n      let videoFeed = {\n        ref: streamRef,\n        stream: event.streams[0],\n        peerUUID: peerUuid,\n      };\n      addVideoFeed(videoFeed);\n    }\n  };\n\n  const onLogin = (e) => {\n    console.log(\"login\");\n    if (state.me.username !== \"\") {\n      console.log(\"setting login to false\");\n      // setState({ ...state, login: false });\n      connectToSocket();\n\n      client.send(\n        JSON.stringify({\n          eventName: \"p2pAction\",\n          data: {\n            uuid: state.me.uuid,\n            roomId: state.me.roomId,\n            displayName: state.me.username,\n            dest: \"all\",\n          },\n        })\n      );\n\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then((stream) => {\n          console.log({ stream });\n          localStream = stream; // sets it up for the peer\n          setState({ ...state, ...{ stream, login: false } });\n          //  sendPrediction = true;\n        })\n        .catch(errorHandler);\n    }\n  };\n  const onUsernameUpdate = (e) => {\n    console.log({ state });\n    console.log(\"should set state:\", e.target.value);\n    const newMe = { ...state.me, username: e.target.value };\n    setState({ ...state, me: newMe });\n  };\n\n  const createdDescription = (description, peerUuid) => {\n    console.log(`got description, peer ${peerUuid}`);\n    peerConnections[peerUuid].pc\n      .setLocalDescription(description)\n      .then(() => {\n        client.send(\n          JSON.stringify({\n            eventName: \"p2pAction\",\n            data: {\n              sdp: peerConnections[peerUuid].pc.localDescription,\n              uuid: state.me.uuid,\n              dest: peerUuid,\n            },\n          })\n        );\n      })\n      .catch(errorHandler);\n  };\n\n  if (state.login)\n    return (\n      <div className=\"App\" style={{ marginTop: \"15%\" }}>\n        <div style={{ width: \"725px\", margin: \"0 auto\" }}>webRTC</div>\n        <input\n          style={{ marginTop: \"44px\" }}\n          type=\"text\"\n          placeholder=\"username\"\n          name=\"username\"\n          onChange={onUsernameUpdate}\n        />\n        <input type=\"submit\" value=\"connect\" onClick={onLogin} />\n      </div>\n    );\n  else\n    return (\n      <div className=\"App\">\n        <VideoFeed stream={state.stream} videoFeeds={state.videoFeeds} />\n      </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}