{"ast":null,"code":"var _jsxFileName = \"/Users/craigpickard/Dev/web/hbo-client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport \"../App.css\";\nimport VideoFeed from \"../components/VideoFeed\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      me: {\n        uuid: \"\",\n        username: \"\",\n        roomId: \"\",\n        host: false\n      },\n      login: true,\n      peerConnections: [],\n      videoFeeds: [],\n      stream: null\n    };\n    this.constraints = {\n      video: {\n        width: {\n          max: 320\n        },\n        height: {\n          max: 240\n        },\n        frameRate: {\n          max: 24\n        }\n      },\n      audio: true\n    };\n\n    this.addUser = player => {\n      console.log(\"adding new user\");\n      if (this.state.players < 2) this.setState({\n        players: [...this.state.players, player]\n      });else console.log(\"max 2 people per room\");\n    };\n\n    this.addVideoFeed = videoFeed => {\n      console.log(\"adding video feed\");\n      this.setState({\n        videoFeeds: [...this.state.videoFeeds, videoFeed]\n      });\n    };\n\n    this.gotIceCandidate = (event, peerUuid) => {\n      if (event.candidate != null) {\n        this.client.send(JSON.stringify({\n          eventName: \"p2pAction\",\n          data: {\n            ice: event.candidate,\n            uuid: this.state.me.uuid,\n            dest: peerUuid\n          }\n        }));\n      }\n    };\n\n    this.setUpPeer = (peerUuid, displayName, initCall = false) => {\n      console.log(`setting up webRTC peer: uuid - ${peerUuid}, displayName: ${displayName}`);\n      this.peerConnections[peerUuid] = {\n        displayName: displayName,\n        pc: new RTCPeerConnection(this.peerConnectionConfig)\n      };\n\n      this.peerConnections[peerUuid].pc.onicecandidate = event => this.gotIceCandidate(event, peerUuid);\n\n      this.peerConnections[peerUuid].pc.ontrack = event => this.gotRemoteStream(event, peerUuid);\n\n      this.peerConnections[peerUuid].pc.oniceconnectionstatechange = event => this.checkPeerDisconnect(event, peerUuid);\n\n      this.peerConnections[peerUuid].pc.addStream(this.localStream);\n\n      if (initCall) {\n        this.peerConnections[peerUuid].pc.createOffer().then(description => this.createdDescription(description, peerUuid)).catch(this.errorHandler);\n      }\n    };\n\n    this.errorHandler = err => {\n      console.log(err);\n    };\n\n    this.checkPeerDisconnect = (event, peerUuid) => {\n      var states = this.peerConnections[peerUuid].pc.iceConnectionState;\n      console.log(`connection with peer ${peerUuid} ${states}`);\n\n      if (states === \"failed\" || states === \"closed\" || states === \"disconnected\") {\n        delete this.peerConnections[peerUuid];\n        let videoFeeds = this.state.videoFeeds;\n        videoFeeds = videoFeeds.filter(ele => {\n          return ele.peerUUID !== peerUuid;\n        });\n        this.setState({\n          videoFeeds: videoFeeds\n        });\n      }\n    };\n\n    this.connectToSocket = () => {\n      const {\n        me\n      } = this.state;\n      let data = {\n        eventName: \"selfSetup\",\n        data: {\n          roomId: me.roomId,\n          displayName: me.username\n        }\n      };\n      this.client.send(JSON.stringify(data));\n    };\n\n    this.gotRemoteStream = (event, peerUuid) => {\n      console.log(event);\n\n      if (event.track.kind === \"video\") {\n        console.log(`got remote stream, peer ${peerUuid}`);\n        let streamRef = React.createRef();\n        let videoFeed = {\n          ref: streamRef,\n          stream: event.streams[0],\n          peerUUID: peerUuid\n        };\n        this.addVideoFeed(videoFeed);\n      }\n    };\n\n    this.onLogin = e => {\n      console.log(\"onLogin\");\n      const {\n        me\n      } = this.state;\n\n      if (me.username !== \"\") {\n        this.setState({\n          login: false\n        });\n        this.connectToSocket();\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n          this.localStream = stream; // this.localVideoRef.current.srcObject = this.localStream;\n\n          this.sendPrediction = true;\n          console.log(\"should set state of stream\");\n          this.setState({\n            stream: stream\n          }, () => console.log({\n            state: this.state\n          }));\n        }).catch(this.errorHandler).then(() => {\n          this.client.send(JSON.stringify({\n            eventName: \"p2pAction\",\n            data: {\n              uuid: this.state.me.uuid,\n              roomId: this.state.me.roomId,\n              displayName: this.state.me.username,\n              dest: \"all\"\n            }\n          }));\n        });\n      }\n    };\n\n    this.onUsernameUpdate = e => {\n      let me = this.state.me;\n      me.username = e.target.value;\n      this.setState({\n        me: me\n      });\n    };\n\n    this.createdDescription = (description, peerUuid) => {\n      console.log(`got description, peer ${peerUuid}`);\n      this.peerConnections[peerUuid].pc.setLocalDescription(description).then(() => {\n        this.client.send(JSON.stringify({\n          eventName: \"p2pAction\",\n          data: {\n            sdp: this.peerConnections[peerUuid].pc.localDescription,\n            uuid: this.state.me.uuid,\n            dest: peerUuid\n          }\n        }));\n      }).catch(this.errorHandler);\n    };\n\n    this.localVideoRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.localStream = \"\";\n    this.peerConnections = [];\n    this.peerConnectionConfig = {\n      iceServers: [{\n        urls: \"stun:stun.stunprotocol.org:3478\"\n      }, {\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    };\n    this.client = new W3CWebSocket(\"wss://10.0.1.12:8443\");\n    this.sendPrediction = false;\n    this.hasStream = [];\n  }\n\n  componentWillMount() {\n    let hash = window.location.hash.replace(\"#\", \"\");\n\n    if (hash.split(\"=\")[0] === \"roomId\") {\n      let me = this.state.me;\n      me.roomId = hash.split(\"=\")[1];\n      this.setState({\n        me: me\n      });\n    }\n\n    (async () => {\n      this.setState({\n        loading_model: false\n      });\n    })();\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n\n    this.client.onmessage = message => {\n      let obj = JSON.parse(message.data);\n      console.log(obj);\n\n      switch (obj.eventName) {\n        case \"selfSetup\":\n          this.setState({\n            me: {\n              uuid: obj.data.user.uuid,\n              username: obj.data.user.username,\n              roomId: obj.data.user.room,\n              host: obj.data.user.role === \"HOST\" ? true : false\n            }\n          });\n          console.log(`https://10.0.1.12:3000/#roomId=${obj.data.user.room}`);\n          break;\n\n        case \"p2pAction\":\n          var peerUuid = obj.data.uuid;\n\n          if (peerUuid === this.state.me.uuid || obj.data.dest !== this.state.me.uuid && obj.data.dest !== \"all\") {\n            break;\n          }\n\n          if (obj.data.displayName && obj.data.dest === \"all\") {\n            // set up peer connection object for a newcomer peer\n            this.setUpPeer(peerUuid, obj.data.displayName);\n            this.client.send(JSON.stringify({\n              eventName: \"p2pAction\",\n              data: {\n                displayName: this.state.me.username,\n                uuid: this.state.me.uuid,\n                dest: peerUuid\n              }\n            }));\n          } else if (obj.data.displayName && obj.data.dest === this.state.me.uuid) {\n            // initiate call if we are the newcomer peer\n            this.setUpPeer(peerUuid, obj.data.displayName, true);\n          } else if (obj.data.sdp) {\n            this.peerConnections[peerUuid].pc.setRemoteDescription(new RTCSessionDescription(obj.data.sdp)).then(() => {\n              // Only create answers in response to offers\n              if (obj.data.sdp.type === \"offer\") {\n                this.peerConnections[peerUuid].pc.createAnswer().then(description => this.createdDescription(description, peerUuid)).catch(this.errorHandler);\n              }\n            }).catch(this.errorHandler);\n          } else if (obj.data.ice) {\n            this.peerConnections[peerUuid].pc.addIceCandidate(new RTCIceCandidate(obj.data.ice)).catch(this.errorHandler);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n  }\n\n  render() {\n    const {\n      loading_model,\n      login\n    } = this.state;\n    let page;\n\n    if (login) {\n      page = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          marginTop: \"15%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"725px\",\n          margin: \"0 auto\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }\n      }, \"webRTC\"), /*#__PURE__*/React.createElement(\"input\", {\n        style: {\n          marginTop: \"44px\"\n        },\n        type: \"text\",\n        placeholder: \"username\",\n        name: \"username\",\n        onChange: this.onUsernameUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"connect\",\n        onClick: this.onLogin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      page = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          width: \"100vw\",\n          height: \"100vh\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VideoFeed, {\n        stream: stream // videoRef={this.localVideoRef}\n        ,\n        videoFeeds: this.state.videoFeeds,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 12\n      }\n    }, page);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/craigpickard/Dev/web/hbo-client/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","VideoFeed","App","constructor","props","state","me","uuid","username","roomId","host","login","peerConnections","videoFeeds","stream","constraints","video","width","max","height","frameRate","audio","addUser","player","console","log","players","setState","addVideoFeed","videoFeed","gotIceCandidate","event","peerUuid","candidate","client","send","JSON","stringify","eventName","data","ice","dest","setUpPeer","displayName","initCall","pc","RTCPeerConnection","peerConnectionConfig","onicecandidate","ontrack","gotRemoteStream","oniceconnectionstatechange","checkPeerDisconnect","addStream","localStream","createOffer","then","description","createdDescription","catch","errorHandler","err","states","iceConnectionState","filter","ele","peerUUID","connectToSocket","track","kind","streamRef","createRef","ref","streams","onLogin","e","navigator","mediaDevices","getUserMedia","sendPrediction","onUsernameUpdate","target","value","setLocalDescription","sdp","localDescription","localVideoRef","canvasRef","iceServers","urls","hasStream","componentWillMount","hash","window","location","replace","split","loading_model","componentDidMount","onopen","onmessage","message","obj","parse","user","room","role","setRemoteDescription","RTCSessionDescription","type","createAnswer","addIceCandidate","RTCIceCandidate","render","page","marginTop","margin","display","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport \"../App.css\";\nimport VideoFeed from \"../components/VideoFeed\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.localVideoRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.localStream = \"\";\n    this.peerConnections = [];\n    this.peerConnectionConfig = {\n      iceServers: [\n        { urls: \"stun:stun.stunprotocol.org:3478\" },\n        { urls: \"stun:stun.l.google.com:19302\" },\n      ],\n    };\n\n    this.client = new W3CWebSocket(\"wss://10.0.1.12:8443\");\n\n    this.sendPrediction = false;\n    this.hasStream = [];\n  }\n\n  componentWillMount() {\n    let hash = window.location.hash.replace(\"#\", \"\");\n    if (hash.split(\"=\")[0] === \"roomId\") {\n      let me = this.state.me;\n      me.roomId = hash.split(\"=\")[1];\n      this.setState({ me: me });\n    }\n    (async () => {\n      this.setState({ loading_model: false });\n    })();\n  }\n\n  state = {\n    me: {\n      uuid: \"\",\n      username: \"\",\n      roomId: \"\",\n      host: false,\n    },\n\n    login: true,\n    peerConnections: [],\n    videoFeeds: [],\n    stream: null,\n  };\n\n  constraints = {\n    video: {\n      width: { max: 320 },\n      height: { max: 240 },\n      frameRate: { max: 24 },\n    },\n    audio: true,\n  };\n\n  addUser = (player) => {\n    console.log(\"adding new user\");\n    if (this.state.players < 2)\n      this.setState({ players: [...this.state.players, player] });\n    else console.log(\"max 2 people per room\");\n  };\n\n  addVideoFeed = (videoFeed) => {\n    console.log(\"adding video feed\");\n    this.setState({ videoFeeds: [...this.state.videoFeeds, videoFeed] });\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n    this.client.onmessage = (message) => {\n      let obj = JSON.parse(message.data);\n      console.log(obj);\n      switch (obj.eventName) {\n        case \"selfSetup\":\n          this.setState({\n            me: {\n              uuid: obj.data.user.uuid,\n              username: obj.data.user.username,\n              roomId: obj.data.user.room,\n              host: obj.data.user.role === \"HOST\" ? true : false,\n            },\n          });\n          console.log(`https://10.0.1.12:3000/#roomId=${obj.data.user.room}`);\n          break;\n        case \"p2pAction\":\n          var peerUuid = obj.data.uuid;\n          if (\n            peerUuid === this.state.me.uuid ||\n            (obj.data.dest !== this.state.me.uuid && obj.data.dest !== \"all\")\n          ) {\n            break;\n          }\n\n          if (obj.data.displayName && obj.data.dest === \"all\") {\n            // set up peer connection object for a newcomer peer\n            this.setUpPeer(peerUuid, obj.data.displayName);\n            this.client.send(\n              JSON.stringify({\n                eventName: \"p2pAction\",\n                data: {\n                  displayName: this.state.me.username,\n                  uuid: this.state.me.uuid,\n                  dest: peerUuid,\n                },\n              })\n            );\n          } else if (\n            obj.data.displayName &&\n            obj.data.dest === this.state.me.uuid\n          ) {\n            // initiate call if we are the newcomer peer\n            this.setUpPeer(peerUuid, obj.data.displayName, true);\n          } else if (obj.data.sdp) {\n            this.peerConnections[peerUuid].pc\n              .setRemoteDescription(new RTCSessionDescription(obj.data.sdp))\n              .then(() => {\n                // Only create answers in response to offers\n                if (obj.data.sdp.type === \"offer\") {\n                  this.peerConnections[peerUuid].pc\n                    .createAnswer()\n                    .then((description) =>\n                      this.createdDescription(description, peerUuid)\n                    )\n                    .catch(this.errorHandler);\n                }\n              })\n              .catch(this.errorHandler);\n          } else if (obj.data.ice) {\n            this.peerConnections[peerUuid].pc\n              .addIceCandidate(new RTCIceCandidate(obj.data.ice))\n              .catch(this.errorHandler);\n          }\n          break;\n        default:\n          break;\n      }\n    };\n  }\n\n  gotIceCandidate = (event, peerUuid) => {\n    if (event.candidate != null) {\n      this.client.send(\n        JSON.stringify({\n          eventName: \"p2pAction\",\n          data: {\n            ice: event.candidate,\n            uuid: this.state.me.uuid,\n            dest: peerUuid,\n          },\n        })\n      );\n    }\n  };\n\n  setUpPeer = (peerUuid, displayName, initCall = false) => {\n    console.log(\n      `setting up webRTC peer: uuid - ${peerUuid}, displayName: ${displayName}`\n    );\n    this.peerConnections[peerUuid] = {\n      displayName: displayName,\n      pc: new RTCPeerConnection(this.peerConnectionConfig),\n    };\n    this.peerConnections[peerUuid].pc.onicecandidate = (event) =>\n      this.gotIceCandidate(event, peerUuid);\n    this.peerConnections[peerUuid].pc.ontrack = (event) =>\n      this.gotRemoteStream(event, peerUuid);\n    this.peerConnections[peerUuid].pc.oniceconnectionstatechange = (event) =>\n      this.checkPeerDisconnect(event, peerUuid);\n    this.peerConnections[peerUuid].pc.addStream(this.localStream);\n\n    if (initCall) {\n      this.peerConnections[peerUuid].pc\n        .createOffer()\n        .then((description) => this.createdDescription(description, peerUuid))\n        .catch(this.errorHandler);\n    }\n  };\n\n  errorHandler = (err) => {\n    console.log(err);\n  };\n\n  checkPeerDisconnect = (event, peerUuid) => {\n    var states = this.peerConnections[peerUuid].pc.iceConnectionState;\n    console.log(`connection with peer ${peerUuid} ${states}`);\n    if (\n      states === \"failed\" ||\n      states === \"closed\" ||\n      states === \"disconnected\"\n    ) {\n      delete this.peerConnections[peerUuid];\n      let videoFeeds = this.state.videoFeeds;\n      videoFeeds = videoFeeds.filter((ele) => {\n        return ele.peerUUID !== peerUuid;\n      });\n      this.setState({ videoFeeds: videoFeeds });\n    }\n  };\n\n  connectToSocket = () => {\n    const { me } = this.state;\n    let data = {\n      eventName: \"selfSetup\",\n      data: {\n        roomId: me.roomId,\n        displayName: me.username,\n      },\n    };\n    this.client.send(JSON.stringify(data));\n  };\n\n  gotRemoteStream = (event, peerUuid) => {\n    console.log(event);\n    if (event.track.kind === \"video\") {\n      console.log(`got remote stream, peer ${peerUuid}`);\n      let streamRef = React.createRef();\n      let videoFeed = {\n        ref: streamRef,\n        stream: event.streams[0],\n        peerUUID: peerUuid,\n      };\n      this.addVideoFeed(videoFeed);\n    }\n  };\n\n  onLogin = (e) => {\n    console.log(\"onLogin\");\n    const { me } = this.state;\n    if (me.username !== \"\") {\n      this.setState({ login: false });\n      this.connectToSocket();\n\n      navigator.mediaDevices\n        .getUserMedia(this.constraints)\n        .then((stream) => {\n          this.localStream = stream;\n          // this.localVideoRef.current.srcObject = this.localStream;\n          this.sendPrediction = true;\n          console.log(\"should set state of stream\");\n          this.setState({ stream: stream }, () =>\n            console.log({ state: this.state })\n          );\n        })\n        .catch(this.errorHandler)\n        .then(() => {\n          this.client.send(\n            JSON.stringify({\n              eventName: \"p2pAction\",\n              data: {\n                uuid: this.state.me.uuid,\n                roomId: this.state.me.roomId,\n                displayName: this.state.me.username,\n                dest: \"all\",\n              },\n            })\n          );\n        });\n    }\n  };\n  onUsernameUpdate = (e) => {\n    let me = this.state.me;\n    me.username = e.target.value;\n    this.setState({ me: me });\n  };\n\n  createdDescription = (description, peerUuid) => {\n    console.log(`got description, peer ${peerUuid}`);\n    this.peerConnections[peerUuid].pc\n      .setLocalDescription(description)\n      .then(() => {\n        this.client.send(\n          JSON.stringify({\n            eventName: \"p2pAction\",\n            data: {\n              sdp: this.peerConnections[peerUuid].pc.localDescription,\n              uuid: this.state.me.uuid,\n              dest: peerUuid,\n            },\n          })\n        );\n      })\n      .catch(this.errorHandler);\n  };\n\n  render() {\n    const { loading_model, login } = this.state;\n    let page;\n\n    if (login) {\n      page = (\n        <div className=\"App\" style={{ marginTop: \"15%\" }}>\n          <div style={{ width: \"725px\", margin: \"0 auto\" }}>webRTC</div>\n          <input\n            style={{ marginTop: \"44px\" }}\n            type=\"text\"\n            placeholder=\"username\"\n            name=\"username\"\n            onChange={this.onUsernameUpdate}\n          />\n          <input type=\"submit\" value=\"connect\" onClick={this.onLogin} />\n        </div>\n      );\n    } else {\n      page = (\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100vw\",\n            height: \"100vh\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n          }}\n        >\n          <VideoFeed\n            stream={stream}\n            // videoRef={this.localVideoRef}\n            videoFeeds={this.state.videoFeeds}\n          />\n        </div>\n      );\n    }\n    return <React.Fragment>{page}</React.Fragment>;\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}